{"version":3,"sources":["book.svg","LoaderWithText.js","BookSearch.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","LoaderWithText","props","Loader","active","inline","size","text","BookSearch","state","loading","books","undefined","search","ww","window","innerWidth","fetchBooks","e","a","preventDefault","setState","searchTerms","fetch","response","json","jsonResponse","changeInputHandler","target","value","handleWindowSizeChange","componentDidMount","addEventListener","this","booksInfo","items","Card","Group","centered","itemsPerRow","stackable","style","margin","paddingTop","map","item","info","volumeInfo","title","authors","description","imageLinks","infoLink","publishedDate","publisher","href","color","Image","wrapped","src","thumbnail","Content","Header","Meta","join","Description","extra","minHeight","display","flexWrap","justifyContent","alignSelf","Menu","borderless","fixed","Container","Item","logo","header","position","Form","onSubmit","Input","placeholder","type","name","action","content","icon","onChange","alignItems","textAlign","paddingRight","Component","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.372dd440.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/book.9382b83f.svg\";","import React from 'react'\r\nimport { Loader } from 'semantic-ui-react'\r\n\r\nconst LoaderWithText = props => (\r\n  <Loader active inline=\"centered\" size=\"large\">{props.text}</Loader>\r\n)\r\n\r\nexport default LoaderWithText","import React, { Component } from 'react'\r\nimport { Menu, Container, Image, Form, Card } from 'semantic-ui-react';\r\nimport LoaderWithText from './LoaderWithText';\r\nimport logo from './book.svg';\r\n\r\nexport class BookSearch extends Component {\r\n  state = {\r\n    loading: false,\r\n    books: undefined,\r\n    search: '',\r\n    ww: window.innerWidth,\r\n  }\r\n\r\n  fetchBooks = async (e) => {\r\n    e.preventDefault();\r\n    this.setState({\r\n      loading: true\r\n    })\r\n    const searchTerms = this.state.search;\r\n    const response = await fetch(`https://www.googleapis.com/books/v1/volumes?q=${searchTerms}`);\r\n    const jsonResponse = await response.json();\r\n    this.setState({\r\n      loading: false,\r\n      books: jsonResponse\r\n    })\r\n  }\r\n\r\n  changeInputHandler = e => {\r\n    this.setState({\r\n      search: e.target.value\r\n    })\r\n  }\r\n\r\n  handleWindowSizeChange = () => {\r\n    this.setState({ ww: window.innerWidth });\r\n  };\r\n  \r\n  componentDidMount = () => {\r\n    window.addEventListener('resize', this.handleWindowSizeChange);\r\n  }\r\n\r\n  render() {\r\n\r\n    const { books, search, loading, ww } = this.state;\r\n\r\n    const booksInfo = (books && books.items) ?\r\n    <Card.Group centered itemsPerRow={5} stackable={true}  style={{margin: '0 1rem', paddingTop: '6rem'}}>\r\n      {books.items.map(item => {\r\n        const info = item.volumeInfo;\r\n        const {\r\n          title = 'No title data.',\r\n          authors = ['No author data.'],\r\n          description = '',\r\n          imageLinks = '',\r\n          infoLink = '',\r\n          publishedDate,\r\n          publisher,\r\n        } = info;\r\n\r\n        return (\r\n          <Card href={infoLink} color=\"brown\">\r\n            <Image wrapped src={imageLinks.thumbnail} />\r\n            <Card.Content>\r\n              <Card.Header>{title}</Card.Header>\r\n              <Card.Meta>{authors.join(' / ')}</Card.Meta>\r\n              <Card.Description>{description}</Card.Description>\r\n            </Card.Content>\r\n            <Card.Content extra>\r\n              {publishedDate && publisher && <p>{`Published ${publishedDate && `on ${publishedDate}`} ${publisher && `on ${publisher}`}`}</p>}\r\n            </Card.Content>\r\n          </Card>\r\n        )\r\n      })}\r\n    </Card.Group> : \r\n    <div style={{ paddingTop: '6rem', minHeight: '90vh', display: 'flex', flexWrap: 'wrap', justifyContent: 'space-around' }}>\r\n      <h2 style={{ alignSelf: 'center' }}>No results to show.</h2>\r\n    </div>;\r\n    \r\n\r\n    return (\r\n      <>\r\n        <Menu borderless fixed=\"top\">\r\n          <Container>\r\n            <Menu.Item>\r\n              <Image size=\"mini\" src={logo} />\r\n            </Menu.Item>\r\n            { ww >= 400 && <Menu.Item header>BookSearch</Menu.Item> }\r\n            <Menu.Item position=\"right\">\r\n              <Form size={ ww >= 500 ? 'medium' : 'mini'} onSubmit={this.fetchBooks}>\r\n                <Form.Group>\r\n                  <Form.Input\r\n                    placeholder=\"Search for Books...\"\r\n                    type=\"search\"\r\n                    name=\"search\"\r\n                    action={\r\n                      \r\n                      {\r\n                      color: 'brown',\r\n                      content: ww >= 500 ? 'Search' : null,\r\n                      icon: 'search'\r\n                    }}\r\n                    value={search}\r\n                    onChange={this.changeInputHandler} />\r\n                </Form.Group>\r\n              </Form>\r\n            </Menu.Item>\r\n          </Container>\r\n        </Menu>\r\n\r\n        { loading ?\r\n          <div style={{ paddingTop: '6rem', minHeight: '90vh', display: 'flex', alignItems: 'center' }}>\r\n            <LoaderWithText text=\"Loading...\" />\r\n          </div> :\r\n          booksInfo\r\n\r\n        }\r\n        <div style={{textAlign: 'right', paddingRight: '1rem'}}>Icons made by <a href=\"https://www.flaticon.com/authors/dinosoftlabs\" title=\"DinosoftLabs\">DinosoftLabs</a> from <a href=\"https://www.flaticon.com/\"             title=\"Flaticon\">www.flaticon.com</a></div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default BookSearch\r\n","import React from 'react';\nimport 'semantic-ui-css/semantic.min.css';\nimport './App.css';\nimport BookSearch from './BookSearch';\n\nfunction App() {\n\n\n  return (\n      <BookSearch />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}